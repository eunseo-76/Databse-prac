-- 테이블 삭제
DROP TABLE IF EXISTS USER CASCADE;
DROP TABLE IF EXISTS LECTURE CASCADE;
DROP TABLE IF EXISTS INTEREST_LECTURE CASCADE;
DROP TABLE IF EXISTS REVIEW_POST CASCADE;
DROP TABLE IF EXISTS REVIEW_LIKE CASCADE;
DROP TABLE IF EXISTS STUDY_GROUP CASCADE;
DROP TABLE IF EXISTS STUDY_GROUP_APPLICATION CASCADE;
DROP TABLE IF EXISTS QUESTION_POST CASCADE;
DROP TABLE IF EXISTS QUESTION_COMMENT CASCADE;
DROP TABLE IF EXISTS PAY_HISTORY CASCADE;
DROP TABLE IF EXISTS purchased_lecture CASCADE;
DROP TABLE IF EXISTS CHAPTER CASCADE;
DROP TABLE IF EXISTS RENTAL_LIST CASCADE;
DROP TABLE IF EXISTS RENTAL_PRICE_TBL CASCADE;
DROP TABLE IF EXISTS CHAPTER_PRICE CASCADE;
DROP TABLE IF EXISTS NOTIFICATION CASCADE;

-- 1. USER 테이블 생성
CREATE TABLE IF NOT EXISTS `USER`
(
    `USER_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '사용자ID',
    `USER_EMAIL`    VARCHAR(100) NOT NULL COMMENT '사용자이메일',
    `USER_PW`    VARCHAR(255) NOT NULL COMMENT '비밀번호',
    `USER_NICKNAME`    VARCHAR(30) NOT NULL COMMENT '닉네임',
    `USER_NAME`    VARCHAR(255) NOT NULL COMMENT '이름',
    `USER_GENDER`    CHAR(1) NOT NULL COMMENT '성별',
    CHECK (USER_GENDER IN ('M', 'F')),
    `USER_BIRTH`    DATE NOT NULL COMMENT '생년월일',
    `USER_PHONE`    VARCHAR(13) NOT NULL COMMENT '휴대폰번호',
    `USER_AUTH`    BOOLEAN NOT NULL DEFAULT '1' COMMENT '권한',
    `IS_NOTIFIED`    BOOLEAN DEFAULT '1' NOT NULL COMMENT '알림수신여부',
    `IS_ACTIVE`    BOOLEAN DEFAULT '1' NOT NULL COMMENT '탈퇴여부',
 PRIMARY KEY ( `USER_ID` )
) COMMENT = '사용자';

-- 2. LECTURE 테이블 생성
CREATE TABLE IF NOT EXISTS `LECTURE`
(
    `LECTURE_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '강의ID',
    `TEACHER_ID`    INT NOT NULL COMMENT '강사ID',
    `LECTURR_TITLE` VARCHAR(255) NOT NULL COMMENT '강의명',
    `LECTURE_DESCRIPTION`    LONGTEXT NOT NULL COMMENT '강의설명',
    `LECTURE_TIME`    INT NOT NULL COMMENT '강의시간',
    `LECTURE_DIFFICULTY`    CHAR(1) NOT NULL COMMENT '난이도' CHECK(LECTURE_DIFFICULTY IN ('상', '중', '하')),
    `LECTURE_PRICE`    DECIMAL(10) NOT NULL COMMENT '강의구매가격',
    FOREIGN KEY (`TEACHER_ID`) REFERENCES `USER`(`USER_ID`), -- 외래키 제약조건
 	  PRIMARY KEY (`LECTURE_ID`)
) COMMENT = '강의';

-- 3. INTEREST_LECTURE 테이블 생성
CREATE TABLE `INTEREST_LECTURE`
(
	 `INTEREST_LECTURE_ID` INT NOT NULL AUTO_INCREMENT COMMENT '관심강의ID',
	 `LECTURE_ID`    INT NOT NULL COMMENT '강의ID',
	 `INTEREST_USER_ID` INT NOT NULL COMMENT '관심이있는사용자ID',
    `IS_INTERESTED`    BOOLEAN DEFAULT '0' NOT NULL COMMENT '관심등록여부',
 PRIMARY KEY (`INTEREST_LECTURE_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`),
 FOREIGN KEY(`INTEREST_USER_ID`) REFERENCES `USER`(`USER_ID`)

) COMMENT = '관심강의';


-- 4. REVIEW_POST 테이블 생성
CREATE TABLE IF NOT EXISTS `REVIEW_POST`
(
	 `REVIEW_ID`	INT NOT NULL AUTO_INCREMENT COMMENT '후기게시판ID',
	 `USER_ID`	INT NOT NULL COMMENT '사용자ID',
	 `LECTURE_ID`	INT NOT NULL COMMENT '강의ID',
	 `REVIEW_TITLE`	VARCHAR(255) NOT NULL COMMENT '후기게시판제목',
	 `REVIEW_CONTENT`	LONGTEXT NOT NULL COMMENT '후기게시판내용',
	 `REVIEW_RATE` INT NOT NULL COMMENT '후기별점',
	 `REVIEW_TIME`	DATETIME NOT NULL DEFAULT NOW() COMMENT '작성시간',
	 PRIMARY KEY(`REVIEW_ID`),
	 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
	 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`)
) COMMENT = '후기게시글';

-- 5. REIVEW_LIKE 테이블 생성
CREATE TABLE `REVIEW_LIKE`
(
	 `REVIEW_GOOD_ID` INT NOT NULL AUTO_INCREMENT COMMENT '후기게시글좋아요ID',
    `REVIEW_ID`    INT NOT NULL COMMENT '후기게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
 PRIMARY KEY ( `REVIEW_GOOD_ID` ),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`REVIEW_ID`) REFERENCES `REVIEW_POST`(`REVIEW_ID`)
) COMMENT = '후기게시글좋아요';

-- 6. STUDY_GROUP 테이블 생성
CREATE TABLE `STUDY_GROUP`
(
    `STUDY_GRP_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '스터디그룹ID',
    `STUDY_GRP_LEADER_ID`    INT NOT NULL COMMENT '사용자ID',
    `STUDY_GRP_TITLE`    VARCHAR(255) NOT NULL COMMENT '스터디그룹제목',
    `STUDY_GRP_CONTENT`    VARCHAR(255) NOT NULL COMMENT '스터디그룹내용',
    `STUDY_GRP_STATUS`    BOOLEAN DEFAULT '1' NOT NULL COMMENT '스터디그룹모집현황',
    `STUDY_GRP_MAX_MEMBER`    INT DEFAULT 10 NOT NULL COMMENT '스터디그룹최대인원',
    `STUDY_GRP_LINK`    VARCHAR(255) NOT NULL COMMENT '스터디그룹링크',
 PRIMARY KEY ( `STUDY_GRP_ID` ),
 FOREIGN KEY(`STUDY_GRP_LEADER_ID`) REFERENCES `USER`(`USER_ID`)
) COMMENT = '스터디그룹';


-- 7. STUDY_GROUP_APPLICATION 테이블 생성
CREATE TABLE `STUDY_GROUP_APPLICATION`
(
	 `STUDY_APPLY_ID` INT NOT NULL AUTO_INCREMENT COMMENT '스터디그룹시청ID',
	 `USER_ID`    INT NOT NULL COMMENT '신청자ID',
    `STUDY_GRP_ID`    INT NOT NULL COMMENT '스터디그룹ID',
    `STATUS`    INT DEFAULT 0 NOT NULL COMMENT '승인여부',
 PRIMARY KEY ( `STUDY_APPLY_ID` ),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`STUDY_GRP_ID`) REFERENCES `STUDY_GROUP`(`STUDY_GRP_ID`)
) COMMENT = '스터디그룹신청';

-- 8. QUESTION_POST 테이블 생성
CREATE TABLE if NOT EXISTS `QUESTION_POST`
(
    `QUESTION_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '질문게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `LECTURE_ID` 	INT NOT NULL COMMENT '강의ID',
    `QUESTION_TITLE`    VARCHAR(255) NOT NULL COMMENT '질문제목',
    `QUESTION_CONTENT`    LONGTEXT NOT NULL COMMENT '질문내용',
    `QUESTION_TIME`    DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '작성시간',
 PRIMARY KEY ( `QUESTION_ID` ),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`)
) COMMENT = '질문게시글';

-- 9. QUESTION COMMENT 테이블 생성
CREATE TABLE if NOT EXISTS `QUESTION_COMMENT`
(
    `COMMENT_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '댓글ID',
 	 `QUESTION_ID`    INTEGER NOT NULL COMMENT '질문게시판ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `COMMENT_CONTENT`    VARCHAR(255) NOT NULL COMMENT '댓글내용',
    `COMMENT_TIME`    DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '작성시간',
 PRIMARY KEY ( `COMMENT_ID` ),
 FOREIGN KEY (`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY (`QUESTION_ID`) REFERENCES `QUESTION_POST`(`QUESTION_ID`)
) COMMENT = '댓글';

-- 10. PAY_HISTORY 테이블 생성
CREATE TABLE IF NOT EXISTS `PAY_HISTORY`
(
    `PAY_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '결제내역ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `PAY_DATE`    DATE NOT NULL COMMENT '결제일',
    `PRICE`    DECIMAL(10) NOT NULL COMMENT '가격',
    `PAY_METHOD`    VARCHAR(255) NOT NULL COMMENT '결제수단',
    `PAY_CONFIRM_ID`    VARCHAR(255) COMMENT '결제완료ID',
    PRIMARY KEY (`PAY_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER`(`USER_ID`)
) COMMENT = '결제내역';

-- 11. PURCHASED_LECTURE 테이블 생성
CREATE TABLE `PURCHASED_LECTURE`
(
    `PURCHASED_LECTURE_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '구매강의ID',
    `PAY_ID`    INT NOT NULL COMMENT '결제내역ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `LECTURE_ID`    INT NOT NULL COMMENT '강의ID',
 PRIMARY KEY ( `PURCHASED_LECTURE_ID` ),
 FOREIGN KEY(`PAY_ID`) REFERENCES `PAY_HISTORY`(`PAY_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`)
) COMMENT = '구매강의목록';

-- 12. CHAPTER 테이블 생성
CREATE TABLE IF NOT EXISTS `CHAPTER`
(
    `CHAPTER_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '챕터ID',
    `LECTURE_ID`    INT NOT NULL COMMENT '강의ID',
    `CHAPTER_TITLE`	VARCHAR(255) NOT NULL COMMENT '챕터명',
    `CHAPTER_TIME`	INT NOT NULL COMMENT '챕터시간',
    `CHAPTER_NUMBER` INT NOT NULL COMMENT '챕터번호',
    `REFERENCE_PATH` VARCHAR(255) NOT NULL COMMENT '참조경로',
    PRIMARY KEY (`CHAPTER_ID`),
    FOREIGN KEY (`LECTURE_ID`) REFERENCES `LECTURE`(LECTURE_ID) -- 외래키 제약조건
) COMMENT = '강의별챕터';

-- 13. RETAL_LIST 테이블 생성
CREATE TABLE `RENTAL_LIST`
(
    `RENTAL_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '대여ID',
    `PAYMENT_ID`    INT NOT NULL COMMENT '결제내역ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `CHAPTER_ID`    INT NOT NULL COMMENT '챕터ID',
    `LECTURE_ID`    INT NOT NULL COMMENT '강의ID',
    `RENTAL_START`    DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL COMMENT '대여시작일',
    `RENTAL_END`    DATETIME NOT NULL COMMENT '대여만료일',
    `TARGET_DATE`    DATETIME COMMENT '시청목표일',
 PRIMARY KEY ( `RENTAL_ID` ),
 FOREIGN KEY(`PAYMENT_ID`) REFERENCES `PAY_HISTORY`(PAY_ID),
 FOREIGN KEY(`USER_ID`) REFERENCES `USER`(`USER_ID`),
 FOREIGN KEY(`CHAPTER_ID`) REFERENCES `CHAPTER`(`CHAPTER_ID`),
 FOREIGN KEY(`LECTURE_ID`) REFERENCES `LECTURE`(`LECTURE_ID`)
) COMMENT = '대여강의챕터목록';

-- 14. RENTAL_PRICE_TBL 테이블 생성
CREATE TABLE if NOT EXISTS `RENTAL_PRICE_TBL`
(
    `RENTAL_PRICE_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '대여가격ID',
    `RENTAL_DAY`    INT NOT NULL COMMENT '대여기간',
    `RENTAL_PRICE`    DECIMAL(10) NOT NULL COMMENT '대여가격',
 PRIMARY KEY ( `RENTAL_PRICE_ID` )
) COMMENT = '대여가격';

-- 15. CHAPTER_PRICE 테이블 생성
CREATE TABLE IF NOT EXISTS `CHAPTER_PRICE`
(
	 `CHAPTER_PRICE_ID` INT NOT NULL AUTO_INCREMENT COMMENT '챕터별가격ID',
    `CHAPTER_ID`    INT NOT NULL COMMENT '챕터ID',
    `RENTAL_PRICE_ID`	INT NOT NULL COMMENT '대여가격ID',
    PRIMARY KEY (`CHAPTER_PRICE_ID`),
    FOREIGN KEY (`RENTAL_PRICE_ID`) REFERENCES `RENTAL_PRICE_TBL`(`RENTAL_PRICE_ID`),
    FOREIGN KEY (`CHAPTER_ID`) REFERENCES `CHAPTER`(CHAPTER_ID) -- 외래키 제약조건
) COMMENT = '챕터별가격';

-- 16. NOTIFICATION 테이블 생성
CREATE TABLE IF NOT EXISTS `NOTIFICATION`
(
    `NOTIF_ID`    INT NOT NULL AUTO_INCREMENT COMMENT '알림ID',
    `USER_ID`    INT NOT NULL COMMENT '사용자ID',
    `IS_ANNOUNCE`    BOOLEAN NOT NULL COMMENT '공지여부',
    `IS_READ`    BOOLEAN DEFAULT '0'  NOT NULL COMMENT '알림상태',
    `NOTIF_CONTENT`    LONGTEXT NOT NULL COMMENT '알림내용',
    PRIMARY KEY (`NOTIF_ID`),
    FOREIGN KEY (`USER_ID`) REFERENCES `USER` (`USER_ID`)
) COMMENT = '알림';
